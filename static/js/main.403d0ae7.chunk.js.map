{"version":3,"sources":["components/card.js","components/jumbotron.js","components/doctorlist.js","App.js","serviceWorker.js","index.js"],"names":["styles","card","margin","Card","props","react_default","a","createElement","className","style","value","src","image","alt","name","onClick","handleClick","jumbo","textAlign","backgroundImage","concat","color","directions","score","fontSize","quote","Jumbotron","state","highScore","DoctorList","doctors","handleDoctorClick","event","handleAddPoint","_this$state","_this","setState","shuffle","console","log","loc","i","x","Math","floor","random","v","indexOf","_this2","this","jumbotron","map","doctor","id","Component","App","doctorlist","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.403d0ae7.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst styles = {\r\n  card: {\r\n    margin: 0\r\n  }\r\n}\r\n\r\nconst Card = props => (\r\n  <div className=\"col-sm-3\">\r\n      <div className=\"card\" style={styles.card} >\r\n      <img value=\"1\" className=\"card-body\" src={props.image} alt={props.name} onClick={props.handleClick}/>\r\n      </div>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from \"react\";\r\n\r\nconst styles = {\r\n  jumbo: {\r\n    textAlign: \"center\",\r\n    backgroundImage: `url(${\"./images/milky-way.jpg\"})`,\r\n    color: \"#82E0AA\",\r\n  },\r\n  directions: {\r\n    color: \"#AED6F1\"\r\n  },\r\n  score: {\r\n    // color: \"#D2B4DE\",\r\n    color: \"white\",\r\n    fontSize: 30\r\n  },\r\n  quote: {\r\n    color: \"#F9E79F\"\r\n  }\r\n}\r\n\r\nconst Jumbotron = props => (\r\n  <div>\r\n    <div className=\"jumbotron jumbotron-fluid\" style={styles.jumbo}>\r\n      <div className=\"container\">\r\n        <h1 className=\"display-4\">Doctor Who Memory</h1>\r\n        <h3 style={styles.directions}>Take your time and try to click all of the Doctors without clicking a regeneration twice!</h3>\r\n        <br></br>\r\n        <p className=\"lead\" style={styles.quote}>\"People assume that time is a strict progression of cause to effect, but actually, from a nonlinear, non-subjective viewpoint, it's more like a big ball of wibbly-wobbly, timey-wimey...stuff\"</p>\r\n        <h4 style={styles.score}>Score: {props.state.score} | Top Score: {props.state.highScore} </h4>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\r\nimport doctors from \"../doctors.json\"\r\nimport Card from \"./card\"\r\nimport Jumbotron from \"./jumbotron\"\r\n\r\nclass DoctorList extends Component {\r\n  state = {\r\n    doctors: doctors,\r\n    score: 0,\r\n    highScore: 0\r\n  };\r\n  handleDoctorClick = event => {\r\n    \r\n  };\r\n  handleAddPoint = event => {\r\n    const { score, highScore } = this.state;\r\n      if (score < highScore) {\r\n        this.setState({\r\n          score: score + 1\r\n        })\r\n        this.shuffle()\r\n      }\r\n      else {\r\n        this.setState({\r\n          score: score + 1,\r\n          highScore: highScore + 1\r\n        })\r\n        this.shuffle()\r\n      }\r\n    console.log(\"clicked pic\")\r\n    console.log(score)\r\n  };\r\n  \r\n  shuffle = () => {\r\n    const loc = [0,0,0,0,0,0,0,0,0,0,0,0,0,0];\r\n    for (let i = 0; i < 14; i++) {\r\n        let x = Math.floor(Math.random() * 14) + 1;\r\n        let v = loc.indexOf(x);\r\n        while (v >= 0) {\r\n            x = Math.floor(Math.random() * 14) + 1;\r\n            v = loc.indexOf(x);\r\n        }\r\n        loc[i] = x;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Jumbotron state={this.state}/>\r\n        <div className=\"row\">\r\n          {this.state.doctors.map( doctor => (\r\n            <Card \r\n              image={doctor.image}\r\n              id={doctor.id}\r\n              name={doctor.name}\r\n              handleClick={this.handleAddPoint}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default DoctorList;","import React from 'react';\nimport './App.css';\nimport Doctorlist from \"./components/doctorlist\"\n\nconst App = () => (\n  <div>\n    <Doctorlist />\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}